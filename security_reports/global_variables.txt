../../openrtx/src/core/xmodem.c:144:            cmd = CAN;
../../openrtx/src/core/xmodem.c:153:            padSize = 128 - blockSize;
../../openrtx/src/core/xmodem.c:157:            padSize = 1024 - blockSize;
../../openrtx/src/core/xmodem.c:170:            cmd = 0;
../../openrtx/src/core/xmodem.c:184:    cmd = EOT;
../../openrtx/src/core/xmodem.c:202:    command = CRC;
../../openrtx/src/core/xmodem.c:211:            command = NAK;
../../openrtx/src/core/xmodem.c:224:            command = ACK;
../../openrtx/src/core/xmodem.c:237:    command = ACK;
../../openrtx/src/core/audio_path.cpp:38:        source = static_cast<int8_t>(src);
../../openrtx/src/core/audio_path.cpp:39:        destination = static_cast<int8_t>(sink);
../../openrtx/src/core/audio_path.cpp:40:        priority = static_cast<int8_t>(prio);
../../openrtx/src/core/thread_utils.c:20:    result = safe_mutex_init(&global_mutex);
../../openrtx/src/core/thread_utils.c:36:    result = safe_mutex_destroy(&global_mutex);
../../openrtx/src/core/backup.c:63:    memAddr = 0;
../../openrtx/src/core/backup.c:70:    memAddr = 0;
../../openrtx/src/core/graphics.c:134:    WHITE = 0,
../../openrtx/src/core/graphics.c:135:    BLACK = 1,
../../openrtx/src/core/graphics.c:256:        tmp = start.x;
../../openrtx/src/core/graphics.c:260:        tmp = end.x;
../../openrtx/src/core/graphics.c:269:        tmp = start.x;
../../openrtx/src/core/graphics.c:273:        tmp = start.y;
../../openrtx/src/core/graphics.c:279:    dx = end.x - start.x;
../../openrtx/src/core/graphics.c:280:    dy = abs(end.y - start.y);
../../openrtx/src/core/graphics.c:286:        ystep = 1;
../../openrtx/src/core/graphics.c:288:        ystep = -1;
../../openrtx/src/core/graphics.c:477:               yo = glyph.yOffset;
../../openrtx/src/core/graphics.c:479:        line_h = h;
../../openrtx/src/core/graphics.c:490:            line_size = get_line_size(f, &buf[i+1], len-(i+1));
../../openrtx/src/core/graphics.c:506:            line_size = get_line_size(f, buf, len);
../../openrtx/src/core/graphics.c:518:                    bits = bitmap[bo++];
../../openrtx/src/core/graphics.c:654:    percentage = (percentage > 100) ? 100 : percentage;
../../openrtx/src/core/graphics.c:664:        bat_color = red;
../../openrtx/src/core/graphics.c:666:        bat_color = green;
../../openrtx/src/core/graphics.c:746:        color = (i > 9) ? red : color;
../../openrtx/src/core/graphics.c:859:        color = (i > 9) ? red : color;
../../openrtx/src/core/graphics.c:914:        bar_height = (height - 8) * sats[i].snr / 100 + 1;
../../openrtx/src/core/graphics.c:998:        prev_pos = pos;
../../openrtx/src/core/graphics.c:1000:            first_iteration = false;
../../openrtx/src/core/utils.c:45:        interpValue = param[pos - 1] + ((freq - calPoints[pos - 1]) *
../../openrtx/src/core/utils.c:50:        interpValue = param[pos - 1] - ((freq - calPoints[pos - 1]) *
../../openrtx/src/core/audio_stream.c:106:        devs = outputDevices;
../../openrtx/src/core/audio_stream.c:107:        endpoint = pathInfo.sink;
../../openrtx/src/core/audio_stream.c:113:            dev = &devs[i];
../../openrtx/src/core/audio_stream.c:136:            id = i;
../../openrtx/src/core/audio_stream.c:198:        ret = startStream(id);
../../openrtx/src/core/audio_stream.c:207:    ret = dev->driver->sync(&(streams[id].ctx), false);
../../openrtx/src/core/audio_stream.c:211:    ret = dev->driver->data(&(streams[id].ctx), &block.data);
../../openrtx/src/core/gps.c:37:        rtcSyncDone = false;
../../openrtx/src/core/gps.c:45:    rtcSyncDone = true;
../../openrtx/src/core/gps.c:61:        gpsEnabled = state.settings.gps_enabled;
../../openrtx/src/core/gps.c:74:    ret = gps_getSentence(dev, sentence, sizeof(sentence));
../../openrtx/src/core/gps.c:82:    gps_data = state.gps_data;
../../openrtx/src/core/datetime.c:87:        res = div(time->second, 60);
../../openrtx/src/core/datetime.c:99:        res = div(time->minute, 60);
../../openrtx/src/core/datetime.c:111:        res = div(time->hour, 24);
../../openrtx/src/core/datetime.c:123:        res = div (time->month, 12);
../../openrtx/src/core/datetime.c:134:        days_in_feb = 29;
../../openrtx/src/core/datetime.c:145:                days_in_feb = ((daysInYear(time->year) == 366) ? 29 : 28);
../../openrtx/src/core/datetime.c:161:                days_in_feb = ((daysInYear (time->year) == 366) ? 29 : 28);
../../openrtx/src/core/nvmem_access.c:53:        np = &nvm->partitions[part];
../../openrtx/src/core/battery.c:67:    vb          = vb / 1000;
../../openrtx/src/core/battery.c:68:    vb          = (vb + 256) >> 8;
../../openrtx/src/core/crc.c:31:        x   = (crc >> 8) ^ buf[i];
../../openrtx/src/core/crc.c:33:        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ x;
../../openrtx/src/core/audio_codec.c:79:    running     = false;
../../openrtx/src/core/audio_codec.c:80:    readPos     = 0;
../../openrtx/src/core/audio_codec.c:81:    writePos    = 0;
../../openrtx/src/core/audio_codec.c:82:    numElements = 0;
../../openrtx/src/core/audio_codec.c:142:    element      = dataBuffer[readPos];
../../openrtx/src/core/audio_codec.c:143:    readPos      = (readPos + 1) % BUF_SIZE;
../../openrtx/src/core/audio_codec.c:178:    writePos = (writePos + 1) % BUF_SIZE;
../../openrtx/src/core/audio_codec.c:197:    iStream = audioStream_start(iPath, audioBuf, 320, 8000,
../../openrtx/src/core/audio_codec.c:202:        running = false;
../../openrtx/src/core/audio_codec.c:207:    codec2 = codec2_create(CODEC2_MODE_3200);
../../openrtx/src/core/audio_codec.c:223:            sample = dsp_dcBlockFilter(&dcBlock, audio.data[i]);
../../openrtx/src/core/audio_codec.c:240:            readPos = (readPos + 1) % BUF_SIZE;
../../openrtx/src/core/audio_codec.c:244:        writePos = (writePos + 1) % BUF_SIZE;
../../openrtx/src/core/audio_codec.c:263:    running = false;
../../openrtx/src/core/audio_codec.c:276:    oStream = audioStream_start(oPath, audioBuf, 320, 8000,
../../openrtx/src/core/audio_codec.c:281:        running = false;
../../openrtx/src/core/audio_codec.c:285:    codec2 = codec2_create(CODEC2_MODE_3200);
../../openrtx/src/core/audio_codec.c:307:            frame        = dataBuffer[readPos];
../../openrtx/src/core/audio_codec.c:308:            readPos      = (readPos + 1) % BUF_SIZE;
../../openrtx/src/core/audio_codec.c:313:            newData      = true;
../../openrtx/src/core/audio_codec.c:349:    running = false;
../../openrtx/src/core/audio_codec.c:386:    running   = true;
../../openrtx/src/core/audio_codec.c:387:    audioPath = path;
../../openrtx/src/core/audio_codec.c:390:    readPos     = 0;
../../openrtx/src/core/audio_codec.c:391:    writePos    = 0;
../../openrtx/src/core/audio_codec.c:392:    numElements = 0;
../../openrtx/src/core/audio_codec.c:393:    reqStop     = false;
../../openrtx/src/core/audio_codec.c:414:        running = false;
../../openrtx/src/core/audio_codec.c:421:    reqStop = true;
../../openrtx/src/core/audio_codec.c:423:    running = false;
../../openrtx/src/core/voicePrompts.c:150:        vpDataLoaded = true;
../../openrtx/src/core/voicePrompts.c:154:    vpDataLoaded = true;
../../openrtx/src/core/voicePrompts.c:280:        vpAudioPath = audioPath_request(SOURCE_MCU, SINK_SPK, PRIO_PROMPT);
../../openrtx/src/core/voicePrompts.c:308:    currentBeepDuration = 0;
../../openrtx/src/core/voicePrompts.c:309:    beepSeriesIndex     = 0;
../../openrtx/src/core/voicePrompts.c:324:            delayBeepUntilTick = false;
../../openrtx/src/core/voicePrompts.c:337:                currentBeepDuration = beepSeriesBuffer[beepSeriesIndex].duration;
../../openrtx/src/core/voicePrompts.c:358:        vpFile = fopen("voiceprompts.vpc", "r");
../../openrtx/src/core/voicePrompts.c:408:    voicePromptActive = false;
../../openrtx/src/core/voicePrompts.c:561:    vpStartTime = getTick();
../../openrtx/src/core/voicePrompts.c:584:        vpStartTime       = 0;
../../openrtx/src/core/voicePrompts.c:585:        voicePromptActive = true;
../../openrtx/src/core/voicePrompts.c:633:        voicePromptActive              = false;
../../openrtx/src/core/voicePrompts.c:663:        duration = 20;
../../openrtx/src/core/voicePrompts.c:669:    currentBeepDuration = duration;
../../openrtx/src/core/voicePrompts.c:670:    beepSeriesIndex     = 0;
../../openrtx/src/core/voicePrompts.c:693:    currentBeepDuration = beepSeriesBuffer[0].duration;
../../openrtx/src/core/voicePrompts.c:694:    beepSeriesIndex     = 0;
../../openrtx/src/core/voicePrompts.c:695:    delayBeepUntilTick  = true;
../../openrtx/src/core/voicePromptUtils.c:948:            seconds = 0;
../../openrtx/src/core/voicePromptUtils.c:957:            seconds = state.settings.display_timer * 5;
../../openrtx/src/core/voicePromptUtils.c:965:            minutes = (state.settings.display_timer - (TIMER_1M - 1));
../../openrtx/src/core/voicePromptUtils.c:971:            minutes = 15 * (state.settings.display_timer - (TIMER_15M - 1));
../../openrtx/src/core/voicePromptUtils.c:975:            minutes = 60;
../../openrtx/src/core/state.c:109:    lastUpdate = getTick();
../../openrtx/src/core/input.c:56:        kbd_event = true;
../../openrtx/src/core/input.c:73:                kbd_event       = true;
../../openrtx/src/core/input.c:79:    prevKeys = keys;
../../openrtx/src/core/crypto_utils.c:112:        result = (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
../../openrtx/src/core/threads.c:68:        time = getTick();
../../openrtx/src/core/threads.c:110:            sync_rtx = false;
../../openrtx/src/core/threads.c:147:        time = getTick();
../../openrtx/src/protocols/M17/M17LinkSetupFrame.cpp:134:        encoded          = __builtin_bswap32(encoded << 8);
../../openrtx/src/protocols/M17/M17LinkSetupFrame.cpp:153:                crc = (crc << 1) ^ 0x5935;
../../openrtx/src/protocols/M17/M17LinkSetupFrame.cpp:155:                crc = (crc << 1);
../../openrtx/src/protocols/M17/M17Demodulator.cpp:93:                dumpData = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:94:                emptyCtr = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:96:                logRunning = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:140:        dumpData  = true;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:141:        triggered = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:142:        trigCnt   = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:169:    baseband_buffer = std::make_unique< int16_t[] >(2 * SAMPLE_BUF_SIZE);
../../openrtx/src/protocols/M17/M17Demodulator.cpp:170:    demodFrame      = std::make_unique< frame_t >();
../../openrtx/src/protocols/M17/M17Demodulator.cpp:171:    readyFrame      = std::make_unique< frame_t >();
../../openrtx/src/protocols/M17/M17Demodulator.cpp:176:    logRunning = true;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:177:    triggered  = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:178:    dumpData   = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:179:    trigEnable = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:180:    trigCnt    = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:197:    logRunning = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:203:    basebandPath = audioPath_request(SOURCE_RTX, SINK_MCU, PRIO_RX);
../../openrtx/src/protocols/M17/M17Demodulator.cpp:204:    basebandId = audioStream_start(basebandPath, baseband_buffer.get(),
../../openrtx/src/protocols/M17/M17Demodulator.cpp:215:    locked = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:221:    newFrame = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:249:            sample = static_cast< int16_t >(M17::rrc_24k(elem));
../../openrtx/src/protocols/M17/M17Demodulator.cpp:253:            corrThreshold = sampleFilter(std::abs(sample));
../../openrtx/src/protocols/M17/M17Demodulator.cpp:261:                        demodState = DemodState::UNLOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:271:                        demodState = DemodState::SYNCED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:278:                    samplingPoint  = streamSync.samplingIndex();
../../openrtx/src/protocols/M17/M17Demodulator.cpp:279:                    outerDeviation = correlator.maxDeviation(samplingPoint);
../../openrtx/src/protocols/M17/M17Demodulator.cpp:280:                    frameIndex     = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:298:                        locked     = true;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:299:                        demodState = DemodState::LOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:303:                        demodState = DemodState::UNLOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:319:                            demodState = DemodState::SYNC_UPDATE;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:320:                            syncCount  = SYNCWORD_SAMPLES * 2;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:348:                                outerDeviation = correlator.maxDeviation(samplingPoint);
../../openrtx/src/protocols/M17/M17Demodulator.cpp:349:                                samplingPoint  = streamSync.samplingIndex();
../../openrtx/src/protocols/M17/M17Demodulator.cpp:350:                                missedSyncs    = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:351:                                demodState     = DemodState::LOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:364:                            demodState = DemodState::UNLOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:365:                            locked     = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:369:                            demodState = DemodState::LOCKED;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:381:            sampleIndex  = (sampleIndex + 1) % SAMPLES_PER_SYMBOL;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:394:        symbol = +3;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:398:        symbol = -3;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:402:        symbol = +1;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:406:        symbol = -1;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:415:        frameIndex = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:416:        newFrame   = true;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:424:    sampleIndex = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:425:    frameIndex  = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:426:    sampleCount = 0;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:427:    newFrame    = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:428:    locked      = false;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:429:    demodState  = DemodState::INIT;
../../openrtx/src/protocols/M17/M17Demodulator.cpp:430:    initCount   = RX_SAMPLE_RATE / 50;  // 50ms of init time
../../openrtx/src/protocols/M17/M17Callsign.cpp:78:            isBroadcast = false;
../../openrtx/src/protocols/M17/M17Modulator.cpp:52:    baseband_buffer = std::make_unique< int16_t[] >(2 * M17_FRAME_SAMPLES);
../../openrtx/src/protocols/M17/M17Modulator.cpp:53:    idleBuffer      = baseband_buffer.get();
../../openrtx/src/protocols/M17/M17Modulator.cpp:54:    txRunning       = false;
../../openrtx/src/protocols/M17/M17Modulator.cpp:66:        txRunning = false;
../../openrtx/src/protocols/M17/M17Modulator.cpp:82:    outPath = audioPath_request(SOURCE_MCU, SINK_RTX, PRIO_TX);
../../openrtx/src/protocols/M17/M17Modulator.cpp:86:    outStream = audioStream_start(outPath, baseband_buffer.get(),
../../openrtx/src/protocols/M17/M17Modulator.cpp:93:    idleBuffer = outputStream_getIdleBuffer(outStream);
../../openrtx/src/protocols/M17/M17Modulator.cpp:96:    txRunning = true;
../../openrtx/src/protocols/M17/M17Modulator.cpp:126:        it       = std::copy(sym.begin(), sym.end(), it);
../../openrtx/src/protocols/M17/M17Modulator.cpp:139:    txRunning  = false;
../../openrtx/src/protocols/M17/M17Modulator.cpp:140:    idleBuffer = baseband_buffer.get();
../../openrtx/src/protocols/M17/M17Modulator.cpp:150:    invPhase = status;
../../openrtx/src/protocols/M17/M17Modulator.cpp:166:        elem          = M17::rrc_48k(elem * M17_RRC_GAIN) - M17_RRC_OFFSET;
../../openrtx/src/protocols/M17/M17Modulator.cpp:168:        elem          = pwmComp(elem);
../../openrtx/src/protocols/M17/M17Modulator.cpp:183:    idleBuffer = outputStream_getIdleBuffer(outStream);
../../openrtx/src/protocols/M17/M17FrameEncoder.cpp:42:    currentLich       = 0;
../../openrtx/src/protocols/M17/M17FrameEncoder.cpp:43:    streamFrameNumber = 0;
../../openrtx/src/protocols/M17/M17FrameEncoder.cpp:86:    streamFrameNumber = (streamFrameNumber + 1) & 0x7FFF;
../../openrtx/src/protocols/M17/M17FrameEncoder.cpp:107:    currentLich = (currentLich + 1) % lichSegments.size();
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:38:    lsfSegmentMap = 0;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:87:        type = M17FrameType::LINK_SETUP;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:88:        minDistance = hammDistance;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:92:    hammDistance = hammingDistance(syncWord[0], STREAM_SYNC_WORD[0])
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:96:        type = M17FrameType::STREAM;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:97:        minDistance = hammDistance;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:104:        type = M17FrameType::UNKNOWN;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:143:            lsfSegmentMap = 0;
../../openrtx/src/protocols/M17/M17FrameDecoder.cpp:182:        block = __builtin_bswap32(block) >> 8;
../../openrtx/src/ui/default/ui_main.c:188:                    dst = ui_state->new_callsign;
../../openrtx/src/ui/default/ui_main.c:193:                        dst = currentLanguage->broadcast;
../../openrtx/src/ui/default/ui_main.c:195:                        dst = rtxStatus.destination_address;
../../openrtx/src/ui/default/ui_menu.c:105:        lastValueUpdate = now;
../../openrtx/src/ui/default/ui_menu.c:177:            scroll = selected - entries_in_screen + 1;
../../openrtx/src/ui/default/ui_menu.c:179:        result = (*getCurrentEntry)(entry_buf, sizeof(entry_buf), item+scroll);
../../openrtx/src/ui/default/ui_menu.c:182:            text_color = color_white;
../../openrtx/src/ui/default/ui_menu.c:185:                text_color = color_black;
../../openrtx/src/ui/default/ui_menu.c:212:            scroll = selected - entries_in_screen + 1;
../../openrtx/src/ui/default/ui_menu.c:214:        result = (*getCurrentEntry)(entry_buf, sizeof(entry_buf), item+scroll);
../../openrtx/src/ui/default/ui_menu.c:216:        result = (*getCurrentValue)(value_buf, sizeof(value_buf), item+scroll);
../../openrtx/src/ui/default/ui_menu.c:219:            text_color = color_white;
../../openrtx/src/ui/default/ui_menu.c:224:                text_color = color_black;
../../openrtx/src/ui/default/ui_menu.c:228:                    text_color = color_white;
../../openrtx/src/ui/default/ui_menu.c:229:                    full_rect = false;
../../openrtx/src/ui/default/ui_menu.c:234:                priorEditMode = ui_state->edit_mode;
../../openrtx/src/ui/default/ui_menu.c:282:            value = last_state.settings.brightness;
../../openrtx/src/ui/default/ui_menu.c:287:            value = last_state.settings.contrast;
../../openrtx/src/ui/default/ui_menu.c:337:                sign = '+';
../../openrtx/src/ui/default/ui_menu.c:341:                sign   = '-';
../../openrtx/src/ui/default/ui_menu.c:389:                value = txFreq - rxFreq;
../../openrtx/src/ui/default/ui_menu.c:391:                value = rxFreq - txFreq;
../../openrtx/src/ui/default/ui_menu.c:396:            value = freq_steps[last_state.step_index];
../../openrtx/src/ui/default/ui_menu.c:405:        prefix = 'M';
../../openrtx/src/ui/default/ui_menu.c:406:        div    = 1000000;
../../openrtx/src/ui/default/ui_menu.c:410:        prefix = 'k';
../../openrtx/src/ui/default/ui_menu.c:411:        div    = 1000;
../../openrtx/src/ui/default/ui_menu.c:505:            value = last_state.settings.vpLevel;
../../openrtx/src/ui/default/ui_menu.c:595:                major = minor = patch = release = 0;
../../openrtx/src/ui/default/ui_menu.c:616:        result = cps_readBankHeader(&bank, index - 1);
../../openrtx/src/ui/default/ui_menu.c:708:                fix_buf = "GPS";
../../openrtx/src/ui/default/ui_menu.c:711:                fix_buf = "DGPS";
../../openrtx/src/ui/default/ui_menu.c:714:                fix_buf = "PPS";
../../openrtx/src/ui/default/ui_menu.c:718:                fix_buf = "RTK";
../../openrtx/src/ui/default/ui_menu.c:721:                fix_buf = (char*)currentLanguage->error;
../../openrtx/src/ui/default/ui_menu.c:728:                type_buf = "";
../../openrtx/src/ui/default/ui_menu.c:731:                type_buf = "2D";
../../openrtx/src/ui/default/ui_menu.c:734:                type_buf = "3D";
../../openrtx/src/ui/default/ui_menu.c:737:                type_buf = (char*)currentLanguage->error;
../../openrtx/src/ui/default/ui_menu.c:1067:        lastDraw = getTick();
../../openrtx/src/ui/default/ui_menu.c:1097:            prefix = 'M';
../../openrtx/src/ui/default/ui_menu.c:1098:            div    = 1000000;
../../openrtx/src/ui/default/ui_menu.c:1102:            prefix = 'k';
../../openrtx/src/ui/default/ui_menu.c:1103:            div    = 1000;
../../openrtx/src/ui/default/ui.c:582:        valid = true;
../../openrtx/src/ui/default/ui.c:589:        valid = true;
../../openrtx/src/ui/default/ui.c:619:        channel_index = cps_readBankData(state.bank, channel_index);
../../openrtx/src/ui/default/ui.c:877:    standby = true;
../../openrtx/src/ui/default/ui.c:878:    redraw_needed = false;
../../openrtx/src/ui/default/ui.c:884:    last_event_tick = now;
../../openrtx/src/ui/default/ui.c:889:    standby = false;
../../openrtx/src/ui/default/ui.c:890:    redraw_needed = true;
../../openrtx/src/ui/default/ui.c:909:    tone_tx_enable = tone_flags >> 1;
../../openrtx/src/ui/default/ui.c:910:    tone_rx_enable = tone_flags & 1;
../../openrtx/src/ui/default/ui.c:1134:        num_symbols = strlen(symbols_ITU_T_E161_callsign[num_key]);
../../openrtx/src/ui/default/ui.c:1139:        num_symbols = strlen(symbols_ITU_T_E161[num_key]);
../../openrtx/src/ui/default/ui.c:1272:    last_event_tick = getTick();
../../openrtx/src/ui/default/ui.c:1273:    redraw_needed = true;
../../openrtx/src/ui/default/ui.c:1275:    layout_ready = true;
../../openrtx/src/ui/default/ui.c:1279:    ui_state = (const struct ui_state_t){ 0 };
../../openrtx/src/ui/default/ui.c:1306:    last_state = state;
../../openrtx/src/ui/default/ui.c:1332:        priorGPSFixQuality= state.gps_data.fix_quality;
../../openrtx/src/ui/default/ui.c:1338:        priorGPSFixType = state.gps_data.fix_type;
../../openrtx/src/ui/default/ui.c:1344:        priorGPSSpeed = state.gps_data.speed;
../../openrtx/src/ui/default/ui.c:1350:        priorGPSAltitude = state.gps_data.altitude;
../../openrtx/src/ui/default/ui.c:1356:        priorGPSDirection = state.gps_data.tmg_true;
../../openrtx/src/ui/default/ui.c:1362:        priorSatellitesInView = state.gps_data.satellites_in_view;
../../openrtx/src/ui/default/ui.c:1366:        vpGPSLastUpdate=now;
../../openrtx/src/ui/default/ui.c:1380:    evQueue_rdPos   = newTail;
../../openrtx/src/ui/default/ui.c:1384:    redraw_needed = true;
../../openrtx/src/ui/default/ui.c:1408:        macro_latched = false;
../../openrtx/src/ui/default/ui.c:1409:        macro_menu = false;
../../openrtx/src/ui/default/ui.c:1428:            macro_menu = true;
../../openrtx/src/ui/default/ui.c:1435:                    macro_latched = true;
../../openrtx/src/ui/default/ui.c:1440:                    macro_latched = false;
../../openrtx/src/ui/default/ui.c:1450:            macro_menu = false;
../../openrtx/src/ui/default/ui.c:1456:            macro_menu = true;
../../openrtx/src/ui/default/ui.c:1457:            macro_latched = true;
../../openrtx/src/ui/default/ui.c:1610:                            f1Handled = true;
../../openrtx/src/ui/default/ui.c:1718:                                f1Handled = true;
../../openrtx/src/ui/default/ui.c:1781:                            f1Handled = true;
../../openrtx/src/ui/default/ui.c:1885:                            result = cps_readBankHeader(&newbank, ui_state.menu_selected - 1);
../../openrtx/src/ui/default/ui.c:1921:                    f1Handled = true;
../../openrtx/src/ui/default/ui.c:2239:                                f1Handled=true;
../../openrtx/src/ui/default/ui.c:2328:                                f1Handled=true;
../../openrtx/src/ui/default/ui.c:2583:        layout_ready = true;
../../openrtx/src/ui/default/ui.c:2700:    redraw_needed = false;
../../openrtx/src/ui/default/ui.c:2717:    evQueue_wrPos = newHead;
../../openrtx/src/ui/module17/ui_main.c:94:                    dst = ui_state->new_callsign;
../../openrtx/src/ui/module17/ui_main.c:99:                        dst = "--";
../../openrtx/src/ui/module17/ui_main.c:101:                        dst = rtxStatus.destination_address;
../../openrtx/src/ui/module17/ui_main.c:105:                    last = "LAST";
../../openrtx/src/ui/module17/ui_main.c:107:                    last = rtxStatus.M17_src;
../../openrtx/src/ui/module17/ui_menu.c:81:            scroll = selected - entries_in_screen + 1;
../../openrtx/src/ui/module17/ui_menu.c:83:        result = (*getCurrentEntry)(entry_buf, sizeof(entry_buf), item+scroll);
../../openrtx/src/ui/module17/ui_menu.c:86:            text_color = color_white;
../../openrtx/src/ui/module17/ui_menu.c:89:                text_color = color_black;
../../openrtx/src/ui/module17/ui_menu.c:115:            scroll = selected - entries_in_screen + 1;
../../openrtx/src/ui/module17/ui_menu.c:117:        result = (*getCurrentEntry)(entry_buf, sizeof(entry_buf), item+scroll);
../../openrtx/src/ui/module17/ui_menu.c:119:        result = (*getCurrentValue)(value_buf, sizeof(value_buf), item+scroll);
../../openrtx/src/ui/module17/ui_menu.c:122:            text_color = color_white;
../../openrtx/src/ui/module17/ui_menu.c:127:                text_color = color_black;
../../openrtx/src/ui/module17/ui_menu.c:131:                    text_color = color_white;
../../openrtx/src/ui/module17/ui_menu.c:132:                    full_rect = false;
../../openrtx/src/ui/module17/ui_menu.c:176:            value = last_state.settings.brightness;
../../openrtx/src/ui/module17/ui_menu.c:360:                fix_buf = "SPS";
../../openrtx/src/ui/module17/ui_menu.c:363:                fix_buf = "DGPS";
../../openrtx/src/ui/module17/ui_menu.c:366:                fix_buf = "PPS";
../../openrtx/src/ui/module17/ui_menu.c:369:                fix_buf = "ERROR";
../../openrtx/src/ui/module17/ui_menu.c:376:                type_buf = "";
../../openrtx/src/ui/module17/ui_menu.c:379:                type_buf = "2D";
../../openrtx/src/ui/module17/ui_menu.c:382:                type_buf = "3D";
../../openrtx/src/ui/module17/ui_menu.c:385:                type_buf = "ERROR";
../../openrtx/src/ui/module17/ui_menu.c:399:        longitude = (longitude < 0) ? -longitude : longitude;
../../openrtx/src/ui/module17/ui_menu.c:624:        lastDraw = getTick();
../../openrtx/src/ui/module17/ui.c:274:    layout = _ui_calculateLayout();
../../openrtx/src/ui/module17/ui.c:275:    layout_ready = true;
../../openrtx/src/ui/module17/ui.c:279:    ui_state = (const struct ui_state_t){ 0 };
../../openrtx/src/ui/module17/ui.c:354:        can = 0;
../../openrtx/src/ui/module17/ui.c:357:        can = 15;
../../openrtx/src/ui/module17/ui.c:369:        value = 0x100;
../../openrtx/src/ui/module17/ui.c:372:        value = 0x001;
../../openrtx/src/ui/module17/ui.c:382:        gain = 0;
../../openrtx/src/ui/module17/ui.c:385:        gain = 2;
../../openrtx/src/ui/module17/ui.c:460:    num_symbols = strlen(symbols_callsign);
../../openrtx/src/ui/module17/ui.c:496:    last_state = state;
../../openrtx/src/ui/module17/ui.c:507:    evQueue_rdPos   = newTail;
../../openrtx/src/ui/module17/ui.c:857:        layout = _ui_calculateLayout();
../../openrtx/src/ui/module17/ui.c:858:        layout_ready = true;
../../openrtx/src/ui/module17/ui.c:917:    evQueue_wrPos = newHead;
../../openrtx/src/rtx/OpMode_FM.cpp:50:    oldVolume = volume;
../../openrtx/src/rtx/OpMode_FM.cpp:65:    rfSqlOpen = false;
../../openrtx/src/rtx/OpMode_FM.cpp:66:    sqlOpen   = false;
../../openrtx/src/rtx/OpMode_FM.cpp:67:    enterRx   = true;
../../openrtx/src/rtx/OpMode_FM.cpp:78:    rfSqlOpen = false;
../../openrtx/src/rtx/OpMode_FM.cpp:79:    sqlOpen   = false;
../../openrtx/src/rtx/OpMode_FM.cpp:80:    enterRx   = false;
../../openrtx/src/rtx/OpMode_FM.cpp:112:            rxAudioPath = audioPath_request(SOURCE_RTX, SINK_SPK, PRIO_RX);
../../openrtx/src/rtx/OpMode_FM.cpp:119:            sqlOpen = false;
../../openrtx/src/rtx/OpMode_FM.cpp:128:        enterRx = false;
../../openrtx/src/rtx/OpMode_FM.cpp:138:        txAudioPath = audioPath_request(SOURCE_MIC, SINK_RTX, PRIO_TX);
../../openrtx/src/rtx/OpMode_FM.cpp:150:        enterRx = true;
../../openrtx/src/rtx/OpMode_FM.cpp:151:        sqlOpen = false;  // Force squelch to be redetected.
../../openrtx/src/rtx/rtx.cpp:45:    cfgMutex = m;
../../openrtx/src/rtx/rtx.cpp:46:    newCnf   = NULL;
../../openrtx/src/rtx/rtx.cpp:69:    currMode = &noMode;
../../openrtx/src/rtx/rtx.cpp:80:    rssi         = radio_getRssi();
../../openrtx/src/rtx/rtx.cpp:81:    reinitFilter = false;
../../openrtx/src/rtx/rtx.cpp:101:    newCnf = cfg;
../../openrtx/src/rtx/rtx.cpp:123:            reconfigure = true;
../../openrtx/src/rtx/rtx.cpp:124:            newCnf = NULL;
../../openrtx/src/rtx/rtx.cpp:199:                rssi = (filt_rssi + 32768) >> 16;               // Round to nearest
../../openrtx/src/rtx/rtx.cpp:203:                rssi = radio_getRssi();
../../openrtx/src/rtx/rtx.cpp:204:                reinitFilter = false;
../../openrtx/src/rtx/rtx.cpp:211:        reinitFilter = true;
../../openrtx/src/rtx/OpMode_M17.cpp:58:    locked       = false;
../../openrtx/src/rtx/OpMode_M17.cpp:59:    dataValid    = false;
../../openrtx/src/rtx/OpMode_M17.cpp:60:    extendedCall = false;
../../openrtx/src/rtx/OpMode_M17.cpp:61:    startRx      = true;
../../openrtx/src/rtx/OpMode_M17.cpp:62:    startTx      = false;
../../openrtx/src/rtx/OpMode_M17.cpp:67:    startRx = false;
../../openrtx/src/rtx/OpMode_M17.cpp:68:    startTx = false;
../../openrtx/src/rtx/OpMode_M17.cpp:88:    invertTxPhase = true;
../../openrtx/src/rtx/OpMode_M17.cpp:90:        invertRxPhase = true;
../../openrtx/src/rtx/OpMode_M17.cpp:92:        invertRxPhase = false;
../../openrtx/src/rtx/OpMode_M17.cpp:97:    invertTxPhase = (mod17CalData.bb_tx_invert == 1) ? true : false;
../../openrtx/src/rtx/OpMode_M17.cpp:98:    invertRxPhase = (mod17CalData.bb_rx_invert == 1) ? true : false;
../../openrtx/src/rtx/OpMode_M17.cpp:100:    invertTxPhase = true;
../../openrtx/src/rtx/OpMode_M17.cpp:102:    invertTxPhase = true;
../../openrtx/src/rtx/OpMode_M17.cpp:103:    invertRxPhase = true;
../../openrtx/src/rtx/OpMode_M17.cpp:163:        startTx = true;
../../openrtx/src/rtx/OpMode_M17.cpp:181:        startRx = false;
../../openrtx/src/rtx/OpMode_M17.cpp:191:        locked = lock;
../../openrtx/src/rtx/OpMode_M17.cpp:206:                dataValid = true;
../../openrtx/src/rtx/OpMode_M17.cpp:218:                    extendedCall = true;
../../openrtx/src/rtx/OpMode_M17.cpp:233:                    extendedCall = true;
../../openrtx/src/rtx/OpMode_M17.cpp:259:                    rxAudioPath = audioPath_request(SOURCE_MCU, SINK_SPK, PRIO_RX);
../../openrtx/src/rtx/OpMode_M17.cpp:260:                    pthSts = audioPath_getStatus(rxAudioPath);
../../openrtx/src/rtx/OpMode_M17.cpp:278:    locked = lock;
../../openrtx/src/rtx/OpMode_M17.cpp:283:        locked = false;
../../openrtx/src/rtx/OpMode_M17.cpp:291:        dataValid     = false;
../../openrtx/src/rtx/OpMode_M17.cpp:292:        extendedCall  = false;
../../openrtx/src/rtx/OpMode_M17.cpp:307:        startTx = false;
../../openrtx/src/rtx/OpMode_M17.cpp:328:        txAudioPath = audioPath_request(SOURCE_MIC, SINK_MCU, PRIO_TX);
../../openrtx/src/rtx/OpMode_M17.cpp:347:        lastFrame = true;
../../openrtx/src/rtx/OpMode_M17.cpp:348:        startRx   = true;
../../openrtx/src/rtx/OpMode_M17.cpp:374:        truncatedLocal = localCs.substr(slashPos + 1);
../../openrtx/src/rtx/OpMode_M17.cpp:376:    slashPos = incomingCs.find_first_of('/');
../../openrtx/src/rtx/OpMode_M17.cpp:378:        truncatedIncoming = incomingCs.substr(slashPos + 1);
